{"version":3,"sources":["Color.js","Fly.js","App.js","serviceWorker.js","index.js"],"names":["Colors","red","white","brown","pink","brownDark","blue","Fly","getSence","scene","THREE","stargroup","add","camera","window","innerWidth","innerHeight","renderer","setSize","document","getElementById","appendChild","domElement","position","z","createLights","directionalLight","set","sea","geom","mat","color","transparent","opacity","shading","mesh","star","starnum","geometry","material","size","i","points","k1","Math","random","k2","k3","starupdate","children","forEach","onepoint","x","delta","clock","getDelta","orbitControls","update","anima","requestAnimationFrame","render","control","OrbitControls","target","play","audioListener","oceanAmbientSound","load","audioBuffer","setBuffer","xhr","console","log","loaded","total","id","this","Component","App","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b9e88802.chunk.js","sourcesContent":["var Colors = {\n   red:0xf25346,  \n   white:0xd8d0d1,  \n   brown:0x59332e,  \n   pink:0xF5986E,\n   brownDark:0x23190f,  \n   blue:0x68c3c0\n};\n\nexport default Colors;\n","import React, {\n\tComponent\n} from 'react';\nimport * as THREE from 'three';\nimport Colors from './Color';\nimport {\n\tOrbitControls\n} from 'three/examples/jsm/controls/OrbitControls'\nclass Fly extends Component {\n\tcomponentDidMount() {\n\t\tthis.getSence();\n\t\tthis.createLights();\n\t\t//this.sea();\n\t\tthis.star(500);\n\t\tthis.control();\n\t\tthis.play();\n\t\tthis.anima();\n\t}\n\n\tgetSence = () => {\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.stargroup = new THREE.Group();\n\t\tthis.scene.add(this.stargroup);\n\t\tthis.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\t\tthis.renderer = new THREE.WebGLRenderer({});\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\t\tdocument.getElementById('container').appendChild(this.renderer.domElement);\n\t\tthis.camera.position.z = 5;\n\n\n\t}\n\tcreateLights = () => {\n\t\tvar directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n\t\tdirectionalLight.position.set(0, 1, 0);\n\t\tthis.scene.add(directionalLight);\n\t}\n\tsea = () => {\n\t\tvar geom = new THREE.CylinderGeometry(2, 2, 4, 40, 10);\n\n\t\t// 创建材质\n\t\tvar mat = new THREE.MeshBasicMaterial({\n\t\t\tcolor: Colors.blue,\n\t\t\ttransparent: true,\n\t\t\topacity: .6,\n\t\t\tshading: THREE.FlatShading\n\t\t});\n\t\tvar mesh = new THREE.Mesh(geom, mat);\n\n\t\tthis.scene.add(mesh);\n\t}\n\tstar = (starnum) => {\n\t\tvar geometry = new THREE.BoxGeometry(100, 100, 100); //创建一个立方体几何对象Geometry\n\t\tvar material = new THREE.PointsMaterial({\n\t\t\tcolor: 0xffffff,\n\t\t\tsize: 0.1 //点对象像素尺寸\n\t\t}); //材质对象\n\t\tfor (let i = 0; i < starnum; i++) {\n\t\t\tvar points = new THREE.Points(geometry, material); //点模型对象\n\n\t\t\tthis.stargroup.add(points);\n\t\t\tvar k1 = Math.random() - 0.5;\n\t\t\tvar k2 = Math.random() - 0.5;\n\t\t\tvar k3 = Math.random() - 0.5;\n\t\t\tpoints.position.set(200 * k1, 200 * k3, 200 * k2)\n\t\t}\n\t}\n\tstarupdate = () => {\n\t\tthis.stargroup.children.forEach((onepoint) => {\n\t\t\tvar flag = Math.random();\n\t\t\tif (flag > 0.5) {\n\t\t\t\tonepoint.position.x = onepoint.position.x - 0.01;\n\t\t\t\tif (onepoint.position.x < -1)\n\t\t\t\t\tonepoint.position.x = 200;\n\t\t\t} else {\n\t\t\t\tonepoint.position.x = onepoint.position.x + 0.01;\n\t\t\t\tif (onepoint.position.x < -1)\n\t\t\t\t\tonepoint.position.x = 200;\n\t\t\t}\n\n\t\t});\n\n\t\tvar delta = this.clock.getDelta(); //获取时间差\n\t\tthis.orbitControls.update(delta); //更新时间\n\n\n\t}\n\n\n\tanima = () => {\n\t\trequestAnimationFrame(this.anima);\n\t\tthis.renderer.render(this.scene, this.camera);\n\t\tthis.starupdate();\n\n\t}\n\n\tcontrol = () => {\n\t\tthis.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n\t\tthis.orbitControls.target = new THREE.Vector3(0, 0, 0); //控制焦点\n\t\tthis.clock = new THREE.Clock(); //用于更新轨道控制器\n\t}\n\tplay = () => {\n\t\t// 初始化一个侦听器\n\t\tvar audioListener = new THREE.AudioListener();\n\n\t\t// 添加该侦听器到相机中\n\t\tthis.camera.add(audioListener);\n\n\t\t// 实例化一个音频（环境音）对象\n\t\tvar oceanAmbientSound = new THREE.Audio(audioListener);\n\n\t\t// 把该对象添加到场景中去\n\t\tthis.scene.add(oceanAmbientSound);\n\n\t\t// 实例化一个加载器\n\t\tvar loader = new THREE.AudioLoader();\n\n\t\t// 通过URL加载一个资源\n\t\tloader.load(\n\t\t\t// 资源链接\n\t\t\t// 资源加载完成后的回调函数\n\t\t\t'http://m10.music.126.net/20200820111617/ac68e53298446f629459b6dcde7f2961/ymusic/8f09/50ad/d80a/81fc204c00cf11c89a46581cff73149a.mp3',\n\t\t\tfunction(audioBuffer) {\n\t\t\t\t// set the audio object buffer to the loaded object\n\t\t\t\toceanAmbientSound.setBuffer(audioBuffer);\n\n\t\t\t\t// 播放音频\n\t\t\t\toceanAmbientSound.play();\n\t\t\t},\n\t\t\t// 资源加载过程中的回调函数\n\t\t\tfunction(xhr) {\n\t\t\t\tconsole.log((xhr.loaded / xhr.total * 100) + '% loaded');\n\t\t\t},\n\t\t\t// 资源下载错误的回调函数\n\t\t\tfunction(xhr) {\n\t\t\t\tconsole.log('An error happened');\n\t\t\t}\n\t\t);\n\t}\n\trender = () => {\n\t\treturn (\n\t\t\t<div id='container'></div>\n\t\t)\n\t}\n\n\n\n\n\n\n\n\n}\nexport default Fly;\n","import React from 'react';\nimport Fly from './Fly.js';\n\nfunction App() {\n  return (\n\t  <Fly/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}